<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">


    <display-name>Archetype Created Web Application</display-name>

    <!--
        context-param整个项目的全局变量，相当于设定了一个固定的值
        param-name：键
        param-value：值
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!--
        ContextLoaderListener监听器实现了ServletContextListener接口
        作用：在启动web容器时，自动装配ApplicationContext信息
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        配置DispatcherServlet
        DispatcherServlet：前置控制器，主要用于拦截匹配的请求，拦截匹配规则需要自己来定义，把拦截下来的请求分发至Controller
    -->
    <servlet>
        <servlet-name>spring-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--
            配置SpringMVC需要加载的配置文件 spring-mvc.xml
            固定值：键 ：值 - 容器启动时加载spring-mvc.xml配置文件
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>

        <!--
            表示启动容器时初始化该Servlet，当值为0或者大于0时，表示容器在启动应用时加载并初始化这个Servlet
            如果值小于0或未指定时，则指示容器在该Servlet被选择时才加载
            正值越小，Servlet优先级越高，应用启动时就越先被加载，值相同时，容器按照自己选择的顺序来加载
        -->
        <load-on-startup>1</load-on-startup>

    </servlet>

    <!--servlet-mapping：声明与该Servlet相应的匹配规则-->
    <servlet-mapping>
        <servlet-name>spring-dispatcher</servlet-name>
        <!--
            <1>默认匹配:所有的请求 - "/"
            <2>精准匹配：/example  /index.html  /test/list.html 拦截对象：http://localhost/example\index.html\/test/list.html
            <3>扩展名匹配：*.jsp  拦截对象：http://localhost/index.jsp
            <4>路径匹配：/example/*  拦截对象：http://localhost/example/index.html\jsp\XXX\XX.do
            <5>匹配顺序：精确路径>最长路径>扩展名
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--注册字符集的过滤器-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>
